// Generated by mem_process.py, do not edit

static void _doMemOpPost(bool is_async);
static void _doMemOpPre(bool is_async, CUstream hStream);

CUresult CUDAAPI (*real_cuMemcpy) (CUdeviceptr dst, CUdeviceptr src, size_t ByteCount);
CUresult CUDAAPI fake_cuMemcpy(CUdeviceptr dst, CUdeviceptr src, size_t ByteCount) {
  if constexpr (LOG_MEMORY) std::cout << "DRIVER-INJECT-M: cuMemcpy" << std::endl;
  _doMemOpPre(false, nullptr);
  CUresult r = real_cuMemcpy(dst, src, ByteCount);
  _doMemOpPost(false);
  return r;
}
CUresult CUDAAPI (*real_cuMemcpyPeer) (CUdeviceptr dstDevice, CUcontext dstContext, CUdeviceptr srcDevice, CUcontext srcContext, size_t ByteCount);
CUresult CUDAAPI fake_cuMemcpyPeer(CUdeviceptr dstDevice, CUcontext dstContext, CUdeviceptr srcDevice, CUcontext srcContext, size_t ByteCount) {
  if constexpr (LOG_MEMORY) std::cout << "DRIVER-INJECT-M: cuMemcpyPeer" << std::endl;
  _doMemOpPre(false, nullptr);
  CUresult r = real_cuMemcpyPeer(dstDevice, dstContext, srcDevice, srcContext, ByteCount);
  _doMemOpPost(false);
  return r;
}
CUresult CUDAAPI (*real_cuMemcpyHtoD) (CUdeviceptr dstDevice, const void* srcHost, size_t ByteCount);
CUresult CUDAAPI fake_cuMemcpyHtoD(CUdeviceptr dstDevice, const void* srcHost, size_t ByteCount) {
  if constexpr (LOG_MEMORY) std::cout << "DRIVER-INJECT-M: cuMemcpyHtoD" << std::endl;
  _doMemOpPre(false, nullptr);
  CUresult r = real_cuMemcpyHtoD(dstDevice, srcHost, ByteCount);
  _doMemOpPost(false);
  return r;
}
CUresult CUDAAPI (*real_cuMemcpyDtoH) (void* dstHost, CUdeviceptr srcDevice, size_t ByteCount);
CUresult CUDAAPI fake_cuMemcpyDtoH(void* dstHost, CUdeviceptr srcDevice, size_t ByteCount) {
  if constexpr (LOG_MEMORY) std::cout << "DRIVER-INJECT-M: cuMemcpyDtoH" << std::endl;
  _doMemOpPre(false, nullptr);
  CUresult r = real_cuMemcpyDtoH(dstHost, srcDevice, ByteCount);
  _doMemOpPost(false);
  return r;
}
CUresult CUDAAPI (*real_cuMemcpyDtoD) (CUdeviceptr dstDevice, CUdeviceptr srcDevice, size_t ByteCount);
CUresult CUDAAPI fake_cuMemcpyDtoD(CUdeviceptr dstDevice, CUdeviceptr srcDevice, size_t ByteCount) {
  if constexpr (LOG_MEMORY) std::cout << "DRIVER-INJECT-M: cuMemcpyDtoD" << std::endl;
  _doMemOpPre(false, nullptr);
  CUresult r = real_cuMemcpyDtoD(dstDevice, srcDevice, ByteCount);
  _doMemOpPost(false);
  return r;
}
CUresult CUDAAPI (*real_cuMemcpyDtoA) (CUarray dstArray, size_t dstOffset, CUdeviceptr srcDevice, size_t ByteCount);
CUresult CUDAAPI fake_cuMemcpyDtoA(CUarray dstArray, size_t dstOffset, CUdeviceptr srcDevice, size_t ByteCount) {
  if constexpr (LOG_MEMORY) std::cout << "DRIVER-INJECT-M: cuMemcpyDtoA" << std::endl;
  _doMemOpPre(false, nullptr);
  CUresult r = real_cuMemcpyDtoA(dstArray, dstOffset, srcDevice, ByteCount);
  _doMemOpPost(false);
  return r;
}
CUresult CUDAAPI (*real_cuMemcpyAtoD) (CUdeviceptr dstDevice, CUarray srcArray, size_t srcOffset, size_t ByteCount);
CUresult CUDAAPI fake_cuMemcpyAtoD(CUdeviceptr dstDevice, CUarray srcArray, size_t srcOffset, size_t ByteCount) {
  if constexpr (LOG_MEMORY) std::cout << "DRIVER-INJECT-M: cuMemcpyAtoD" << std::endl;
  _doMemOpPre(false, nullptr);
  CUresult r = real_cuMemcpyAtoD(dstDevice, srcArray, srcOffset, ByteCount);
  _doMemOpPost(false);
  return r;
}
CUresult CUDAAPI (*real_cuMemcpyHtoA) (CUarray dstArray, size_t dstOffset, const void* srcHost, size_t ByteCount);
CUresult CUDAAPI fake_cuMemcpyHtoA(CUarray dstArray, size_t dstOffset, const void* srcHost, size_t ByteCount) {
  if constexpr (LOG_MEMORY) std::cout << "DRIVER-INJECT-M: cuMemcpyHtoA" << std::endl;
  _doMemOpPre(false, nullptr);
  CUresult r = real_cuMemcpyHtoA(dstArray, dstOffset, srcHost, ByteCount);
  _doMemOpPost(false);
  return r;
}
CUresult CUDAAPI (*real_cuMemcpyAtoH) (void* dstHost, CUarray srcArray, size_t srcOffset, size_t ByteCount);
CUresult CUDAAPI fake_cuMemcpyAtoH(void* dstHost, CUarray srcArray, size_t srcOffset, size_t ByteCount) {
  if constexpr (LOG_MEMORY) std::cout << "DRIVER-INJECT-M: cuMemcpyAtoH" << std::endl;
  _doMemOpPre(false, nullptr);
  CUresult r = real_cuMemcpyAtoH(dstHost, srcArray, srcOffset, ByteCount);
  _doMemOpPost(false);
  return r;
}
CUresult CUDAAPI (*real_cuMemcpyAtoA) (CUarray dstArray, size_t dstOffset, CUarray srcArray, size_t srcOffset, size_t ByteCount);
CUresult CUDAAPI fake_cuMemcpyAtoA(CUarray dstArray, size_t dstOffset, CUarray srcArray, size_t srcOffset, size_t ByteCount) {
  if constexpr (LOG_MEMORY) std::cout << "DRIVER-INJECT-M: cuMemcpyAtoA" << std::endl;
  _doMemOpPre(false, nullptr);
  CUresult r = real_cuMemcpyAtoA(dstArray, dstOffset, srcArray, srcOffset, ByteCount);
  _doMemOpPost(false);
  return r;
}
CUresult CUDAAPI (*real_cuMemcpy2D) (const CUDA_MEMCPY2D* pCopy);
CUresult CUDAAPI fake_cuMemcpy2D(const CUDA_MEMCPY2D* pCopy) {
  if constexpr (LOG_MEMORY) std::cout << "DRIVER-INJECT-M: cuMemcpy2D" << std::endl;
  _doMemOpPre(false, nullptr);
  CUresult r = real_cuMemcpy2D(pCopy);
  _doMemOpPost(false);
  return r;
}
CUresult CUDAAPI (*real_cuMemcpy2DUnaligned) (const CUDA_MEMCPY2D* pCopy);
CUresult CUDAAPI fake_cuMemcpy2DUnaligned(const CUDA_MEMCPY2D* pCopy) {
  if constexpr (LOG_MEMORY) std::cout << "DRIVER-INJECT-M: cuMemcpy2DUnaligned" << std::endl;
  _doMemOpPre(false, nullptr);
  CUresult r = real_cuMemcpy2DUnaligned(pCopy);
  _doMemOpPost(false);
  return r;
}
CUresult CUDAAPI (*real_cuMemcpy3D) (const CUDA_MEMCPY3D* pCopy);
CUresult CUDAAPI fake_cuMemcpy3D(const CUDA_MEMCPY3D* pCopy) {
  if constexpr (LOG_MEMORY) std::cout << "DRIVER-INJECT-M: cuMemcpy3D" << std::endl;
  _doMemOpPre(false, nullptr);
  CUresult r = real_cuMemcpy3D(pCopy);
  _doMemOpPost(false);
  return r;
}
CUresult CUDAAPI (*real_cuMemcpy3DPeer) (const CUDA_MEMCPY3D_PEER* pCopy);
CUresult CUDAAPI fake_cuMemcpy3DPeer(const CUDA_MEMCPY3D_PEER* pCopy) {
  if constexpr (LOG_MEMORY) std::cout << "DRIVER-INJECT-M: cuMemcpy3DPeer" << std::endl;
  _doMemOpPre(false, nullptr);
  CUresult r = real_cuMemcpy3DPeer(pCopy);
  _doMemOpPost(false);
  return r;
}
CUresult CUDAAPI (*real_cuMemcpyAsync) (CUdeviceptr dst, CUdeviceptr src, size_t ByteCount, CUstream hStream);
CUresult CUDAAPI fake_cuMemcpyAsync(CUdeviceptr dst, CUdeviceptr src, size_t ByteCount, CUstream hStream) {
  if constexpr (LOG_MEMORY) std::cout << "DRIVER-INJECT-M: cuMemcpyAsync" << std::endl;
  _doMemOpPre(true, hStream);
  CUresult r = real_cuMemcpyAsync(dst, src, ByteCount, hStream);
  _doMemOpPost(true);
  return r;
}
CUresult CUDAAPI (*real_cuMemcpyPeerAsync) (CUdeviceptr dstDevice, CUcontext dstContext, CUdeviceptr srcDevice, CUcontext srcContext, size_t ByteCount, CUstream hStream);
CUresult CUDAAPI fake_cuMemcpyPeerAsync(CUdeviceptr dstDevice, CUcontext dstContext, CUdeviceptr srcDevice, CUcontext srcContext, size_t ByteCount, CUstream hStream) {
  if constexpr (LOG_MEMORY) std::cout << "DRIVER-INJECT-M: cuMemcpyPeerAsync" << std::endl;
  _doMemOpPre(true, hStream);
  CUresult r = real_cuMemcpyPeerAsync(dstDevice, dstContext, srcDevice, srcContext, ByteCount, hStream);
  _doMemOpPost(true);
  return r;
}
CUresult CUDAAPI (*real_cuMemcpyHtoDAsync) (CUdeviceptr dstDevice, const void* srcHost, size_t ByteCount, CUstream hStream);
CUresult CUDAAPI fake_cuMemcpyHtoDAsync(CUdeviceptr dstDevice, const void* srcHost, size_t ByteCount, CUstream hStream) {
  if constexpr (LOG_MEMORY) std::cout << "DRIVER-INJECT-M: cuMemcpyHtoDAsync" << std::endl;
  _doMemOpPre(true, hStream);
  CUresult r = real_cuMemcpyHtoDAsync(dstDevice, srcHost, ByteCount, hStream);
  _doMemOpPost(true);
  return r;
}
CUresult CUDAAPI (*real_cuMemcpyDtoHAsync) (void* dstHost, CUdeviceptr srcDevice, size_t ByteCount, CUstream hStream);
CUresult CUDAAPI fake_cuMemcpyDtoHAsync(void* dstHost, CUdeviceptr srcDevice, size_t ByteCount, CUstream hStream) {
  if constexpr (LOG_MEMORY) std::cout << "DRIVER-INJECT-M: cuMemcpyDtoHAsync" << std::endl;
  _doMemOpPre(true, hStream);
  CUresult r = real_cuMemcpyDtoHAsync(dstHost, srcDevice, ByteCount, hStream);
  _doMemOpPost(true);
  return r;
}
CUresult CUDAAPI (*real_cuMemcpyDtoDAsync) (CUdeviceptr dstDevice, CUdeviceptr srcDevice, size_t ByteCount, CUstream hStream);
CUresult CUDAAPI fake_cuMemcpyDtoDAsync(CUdeviceptr dstDevice, CUdeviceptr srcDevice, size_t ByteCount, CUstream hStream) {
  if constexpr (LOG_MEMORY) std::cout << "DRIVER-INJECT-M: cuMemcpyDtoDAsync" << std::endl;
  _doMemOpPre(true, hStream);
  CUresult r = real_cuMemcpyDtoDAsync(dstDevice, srcDevice, ByteCount, hStream);
  _doMemOpPost(true);
  return r;
}
CUresult CUDAAPI (*real_cuMemcpyHtoAAsync) (CUarray dstArray, size_t dstOffset, const void* srcHost, size_t ByteCount, CUstream hStream);
CUresult CUDAAPI fake_cuMemcpyHtoAAsync(CUarray dstArray, size_t dstOffset, const void* srcHost, size_t ByteCount, CUstream hStream) {
  if constexpr (LOG_MEMORY) std::cout << "DRIVER-INJECT-M: cuMemcpyHtoAAsync" << std::endl;
  _doMemOpPre(true, hStream);
  CUresult r = real_cuMemcpyHtoAAsync(dstArray, dstOffset, srcHost, ByteCount, hStream);
  _doMemOpPost(true);
  return r;
}
CUresult CUDAAPI (*real_cuMemcpyAtoHAsync) (void* dstHost, CUarray srcArray, size_t srcOffset, size_t ByteCount, CUstream hStream);
CUresult CUDAAPI fake_cuMemcpyAtoHAsync(void* dstHost, CUarray srcArray, size_t srcOffset, size_t ByteCount, CUstream hStream) {
  if constexpr (LOG_MEMORY) std::cout << "DRIVER-INJECT-M: cuMemcpyAtoHAsync" << std::endl;
  _doMemOpPre(true, hStream);
  CUresult r = real_cuMemcpyAtoHAsync(dstHost, srcArray, srcOffset, ByteCount, hStream);
  _doMemOpPost(true);
  return r;
}
CUresult CUDAAPI (*real_cuMemcpy2DAsync) (const CUDA_MEMCPY2D* pCopy, CUstream hStream);
CUresult CUDAAPI fake_cuMemcpy2DAsync(const CUDA_MEMCPY2D* pCopy, CUstream hStream) {
  if constexpr (LOG_MEMORY) std::cout << "DRIVER-INJECT-M: cuMemcpy2DAsync" << std::endl;
  _doMemOpPre(true, hStream);
  CUresult r = real_cuMemcpy2DAsync(pCopy, hStream);
  _doMemOpPost(true);
  return r;
}
CUresult CUDAAPI (*real_cuMemcpy3DAsync) (const CUDA_MEMCPY3D* pCopy, CUstream hStream);
CUresult CUDAAPI fake_cuMemcpy3DAsync(const CUDA_MEMCPY3D* pCopy, CUstream hStream) {
  if constexpr (LOG_MEMORY) std::cout << "DRIVER-INJECT-M: cuMemcpy3DAsync" << std::endl;
  _doMemOpPre(true, hStream);
  CUresult r = real_cuMemcpy3DAsync(pCopy, hStream);
  _doMemOpPost(true);
  return r;
}
CUresult CUDAAPI (*real_cuMemcpy3DPeerAsync) (const CUDA_MEMCPY3D_PEER* pCopy, CUstream hStream);
CUresult CUDAAPI fake_cuMemcpy3DPeerAsync(const CUDA_MEMCPY3D_PEER* pCopy, CUstream hStream) {
  if constexpr (LOG_MEMORY) std::cout << "DRIVER-INJECT-M: cuMemcpy3DPeerAsync" << std::endl;
  _doMemOpPre(true, hStream);
  CUresult r = real_cuMemcpy3DPeerAsync(pCopy, hStream);
  _doMemOpPost(true);
  return r;
}
CUresult CUDAAPI (*real_cuMemsetD8) (CUdeviceptr dstDevice, unsigned char uc, size_t N);
CUresult CUDAAPI fake_cuMemsetD8(CUdeviceptr dstDevice, unsigned char uc, size_t N) {
  if constexpr (LOG_MEMORY) std::cout << "DRIVER-INJECT-M: cuMemsetD8" << std::endl;
  _doMemOpPre(false, nullptr);
  CUresult r = real_cuMemsetD8(dstDevice, uc, N);
  _doMemOpPost(false);
  return r;
}
CUresult CUDAAPI (*real_cuMemsetD16) (CUdeviceptr dstDevice, unsigned short us, size_t N);
CUresult CUDAAPI fake_cuMemsetD16(CUdeviceptr dstDevice, unsigned short us, size_t N) {
  if constexpr (LOG_MEMORY) std::cout << "DRIVER-INJECT-M: cuMemsetD16" << std::endl;
  _doMemOpPre(false, nullptr);
  CUresult r = real_cuMemsetD16(dstDevice, us, N);
  _doMemOpPost(false);
  return r;
}
CUresult CUDAAPI (*real_cuMemsetD32) (CUdeviceptr dstDevice, unsigned int ui, size_t N);
CUresult CUDAAPI fake_cuMemsetD32(CUdeviceptr dstDevice, unsigned int ui, size_t N) {
  if constexpr (LOG_MEMORY) std::cout << "DRIVER-INJECT-M: cuMemsetD32" << std::endl;
  _doMemOpPre(false, nullptr);
  CUresult r = real_cuMemsetD32(dstDevice, ui, N);
  _doMemOpPost(false);
  return r;
}
CUresult CUDAAPI (*real_cuMemsetD2D8) (CUdeviceptr dstDevice, size_t dstPitch, unsigned char uc, size_t Width, size_t Height);
CUresult CUDAAPI fake_cuMemsetD2D8(CUdeviceptr dstDevice, size_t dstPitch, unsigned char uc, size_t Width, size_t Height) {
  if constexpr (LOG_MEMORY) std::cout << "DRIVER-INJECT-M: cuMemsetD2D8" << std::endl;
  _doMemOpPre(false, nullptr);
  CUresult r = real_cuMemsetD2D8(dstDevice, dstPitch, uc, Width, Height);
  _doMemOpPost(false);
  return r;
}
CUresult CUDAAPI (*real_cuMemsetD2D16) (CUdeviceptr dstDevice, size_t dstPitch, unsigned short us, size_t Width, size_t Height);
CUresult CUDAAPI fake_cuMemsetD2D16(CUdeviceptr dstDevice, size_t dstPitch, unsigned short us, size_t Width, size_t Height) {
  if constexpr (LOG_MEMORY) std::cout << "DRIVER-INJECT-M: cuMemsetD2D16" << std::endl;
  _doMemOpPre(false, nullptr);
  CUresult r = real_cuMemsetD2D16(dstDevice, dstPitch, us, Width, Height);
  _doMemOpPost(false);
  return r;
}
CUresult CUDAAPI (*real_cuMemsetD2D32) (CUdeviceptr dstDevice, size_t dstPitch, unsigned int ui, size_t Width, size_t Height);
CUresult CUDAAPI fake_cuMemsetD2D32(CUdeviceptr dstDevice, size_t dstPitch, unsigned int ui, size_t Width, size_t Height) {
  if constexpr (LOG_MEMORY) std::cout << "DRIVER-INJECT-M: cuMemsetD2D32" << std::endl;
  _doMemOpPre(false, nullptr);
  CUresult r = real_cuMemsetD2D32(dstDevice, dstPitch, ui, Width, Height);
  _doMemOpPost(false);
  return r;
}
CUresult CUDAAPI (*real_cuMemsetD8Async) (CUdeviceptr dstDevice, unsigned char uc, size_t N, CUstream hStream);
CUresult CUDAAPI fake_cuMemsetD8Async(CUdeviceptr dstDevice, unsigned char uc, size_t N, CUstream hStream) {
  if constexpr (LOG_MEMORY) std::cout << "DRIVER-INJECT-M: cuMemsetD8Async" << std::endl;
  _doMemOpPre(true, hStream);
  CUresult r = real_cuMemsetD8Async(dstDevice, uc, N, hStream);
  _doMemOpPost(true);
  return r;
}
CUresult CUDAAPI (*real_cuMemsetD16Async) (CUdeviceptr dstDevice, unsigned short us, size_t N, CUstream hStream);
CUresult CUDAAPI fake_cuMemsetD16Async(CUdeviceptr dstDevice, unsigned short us, size_t N, CUstream hStream) {
  if constexpr (LOG_MEMORY) std::cout << "DRIVER-INJECT-M: cuMemsetD16Async" << std::endl;
  _doMemOpPre(true, hStream);
  CUresult r = real_cuMemsetD16Async(dstDevice, us, N, hStream);
  _doMemOpPost(true);
  return r;
}
CUresult CUDAAPI (*real_cuMemsetD32Async) (CUdeviceptr dstDevice, unsigned int ui, size_t N, CUstream hStream);
CUresult CUDAAPI fake_cuMemsetD32Async(CUdeviceptr dstDevice, unsigned int ui, size_t N, CUstream hStream) {
  if constexpr (LOG_MEMORY) std::cout << "DRIVER-INJECT-M: cuMemsetD32Async" << std::endl;
  _doMemOpPre(true, hStream);
  CUresult r = real_cuMemsetD32Async(dstDevice, ui, N, hStream);
  _doMemOpPost(true);
  return r;
}
CUresult CUDAAPI (*real_cuMemsetD2D8Async) (CUdeviceptr dstDevice, size_t dstPitch, unsigned char uc, size_t Width, size_t Height, CUstream hStream);
CUresult CUDAAPI fake_cuMemsetD2D8Async(CUdeviceptr dstDevice, size_t dstPitch, unsigned char uc, size_t Width, size_t Height, CUstream hStream) {
  if constexpr (LOG_MEMORY) std::cout << "DRIVER-INJECT-M: cuMemsetD2D8Async" << std::endl;
  _doMemOpPre(true, hStream);
  CUresult r = real_cuMemsetD2D8Async(dstDevice, dstPitch, uc, Width, Height, hStream);
  _doMemOpPost(true);
  return r;
}
CUresult CUDAAPI (*real_cuMemsetD2D16Async) (CUdeviceptr dstDevice, size_t dstPitch, unsigned short us, size_t Width, size_t Height, CUstream hStream);
CUresult CUDAAPI fake_cuMemsetD2D16Async(CUdeviceptr dstDevice, size_t dstPitch, unsigned short us, size_t Width, size_t Height, CUstream hStream) {
  if constexpr (LOG_MEMORY) std::cout << "DRIVER-INJECT-M: cuMemsetD2D16Async" << std::endl;
  _doMemOpPre(true, hStream);
  CUresult r = real_cuMemsetD2D16Async(dstDevice, dstPitch, us, Width, Height, hStream);
  _doMemOpPost(true);
  return r;
}
CUresult CUDAAPI (*real_cuMemsetD2D32Async) (CUdeviceptr dstDevice, size_t dstPitch, unsigned int ui, size_t Width, size_t Height, CUstream hStream);
CUresult CUDAAPI fake_cuMemsetD2D32Async(CUdeviceptr dstDevice, size_t dstPitch, unsigned int ui, size_t Width, size_t Height, CUstream hStream) {
  if constexpr (LOG_MEMORY) std::cout << "DRIVER-INJECT-M: cuMemsetD2D32Async" << std::endl;
  _doMemOpPre(true, hStream);
  CUresult r = real_cuMemsetD2D32Async(dstDevice, dstPitch, ui, Width, Height, hStream);
  _doMemOpPost(true);
  return r;
}

#define MEM_OPS_MAP { "cuMemcpy", { (void*) fake_cuMemcpy, (void**)&real_cuMemcpy } },{ "cuMemcpyPeer", { (void*) fake_cuMemcpyPeer, (void**)&real_cuMemcpyPeer } },{ "cuMemcpyHtoD", { (void*) fake_cuMemcpyHtoD, (void**)&real_cuMemcpyHtoD } },{ "cuMemcpyDtoH", { (void*) fake_cuMemcpyDtoH, (void**)&real_cuMemcpyDtoH } },{ "cuMemcpyDtoD", { (void*) fake_cuMemcpyDtoD, (void**)&real_cuMemcpyDtoD } },{ "cuMemcpyDtoA", { (void*) fake_cuMemcpyDtoA, (void**)&real_cuMemcpyDtoA } },{ "cuMemcpyAtoD", { (void*) fake_cuMemcpyAtoD, (void**)&real_cuMemcpyAtoD } },{ "cuMemcpyHtoA", { (void*) fake_cuMemcpyHtoA, (void**)&real_cuMemcpyHtoA } },{ "cuMemcpyAtoH", { (void*) fake_cuMemcpyAtoH, (void**)&real_cuMemcpyAtoH } },{ "cuMemcpyAtoA", { (void*) fake_cuMemcpyAtoA, (void**)&real_cuMemcpyAtoA } },{ "cuMemcpy2D", { (void*) fake_cuMemcpy2D, (void**)&real_cuMemcpy2D } },{ "cuMemcpy2DUnaligned", { (void*) fake_cuMemcpy2DUnaligned, (void**)&real_cuMemcpy2DUnaligned } },{ "cuMemcpy3D", { (void*) fake_cuMemcpy3D, (void**)&real_cuMemcpy3D } },{ "cuMemcpy3DPeer", { (void*) fake_cuMemcpy3DPeer, (void**)&real_cuMemcpy3DPeer } },{ "cuMemcpyAsync", { (void*) fake_cuMemcpyAsync, (void**)&real_cuMemcpyAsync } },{ "cuMemcpyPeerAsync", { (void*) fake_cuMemcpyPeerAsync, (void**)&real_cuMemcpyPeerAsync } },{ "cuMemcpyHtoDAsync", { (void*) fake_cuMemcpyHtoDAsync, (void**)&real_cuMemcpyHtoDAsync } },{ "cuMemcpyDtoHAsync", { (void*) fake_cuMemcpyDtoHAsync, (void**)&real_cuMemcpyDtoHAsync } },{ "cuMemcpyDtoDAsync", { (void*) fake_cuMemcpyDtoDAsync, (void**)&real_cuMemcpyDtoDAsync } },{ "cuMemcpyHtoAAsync", { (void*) fake_cuMemcpyHtoAAsync, (void**)&real_cuMemcpyHtoAAsync } },{ "cuMemcpyAtoHAsync", { (void*) fake_cuMemcpyAtoHAsync, (void**)&real_cuMemcpyAtoHAsync } },{ "cuMemcpy2DAsync", { (void*) fake_cuMemcpy2DAsync, (void**)&real_cuMemcpy2DAsync } },{ "cuMemcpy3DAsync", { (void*) fake_cuMemcpy3DAsync, (void**)&real_cuMemcpy3DAsync } },{ "cuMemcpy3DPeerAsync", { (void*) fake_cuMemcpy3DPeerAsync, (void**)&real_cuMemcpy3DPeerAsync } },{ "cuMemsetD8", { (void*) fake_cuMemsetD8, (void**)&real_cuMemsetD8 } },{ "cuMemsetD16", { (void*) fake_cuMemsetD16, (void**)&real_cuMemsetD16 } },{ "cuMemsetD32", { (void*) fake_cuMemsetD32, (void**)&real_cuMemsetD32 } },{ "cuMemsetD2D8", { (void*) fake_cuMemsetD2D8, (void**)&real_cuMemsetD2D8 } },{ "cuMemsetD2D16", { (void*) fake_cuMemsetD2D16, (void**)&real_cuMemsetD2D16 } },{ "cuMemsetD2D32", { (void*) fake_cuMemsetD2D32, (void**)&real_cuMemsetD2D32 } },{ "cuMemsetD8Async", { (void*) fake_cuMemsetD8Async, (void**)&real_cuMemsetD8Async } },{ "cuMemsetD16Async", { (void*) fake_cuMemsetD16Async, (void**)&real_cuMemsetD16Async } },{ "cuMemsetD32Async", { (void*) fake_cuMemsetD32Async, (void**)&real_cuMemsetD32Async } },{ "cuMemsetD2D8Async", { (void*) fake_cuMemsetD2D8Async, (void**)&real_cuMemsetD2D8Async } },{ "cuMemsetD2D16Async", { (void*) fake_cuMemsetD2D16Async, (void**)&real_cuMemsetD2D16Async } },{ "cuMemsetD2D32Async", { (void*) fake_cuMemsetD2D32Async, (void**)&real_cuMemsetD2D32Async } },